{"version":3,"sources":["webpack:///./src/templates/tag.js"],"names":["Tag","_ref","data","location","pageContext","tagName","tag","name","tagDescription","description","posts","allMarkdownRemark","edges","filter","_ref2","node","excerpt","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","Fragment","_components_common_meta__WEBPACK_IMPORTED_MODULE_4__","type","image","feature_image","_components_common__WEBPACK_IMPORTED_MODULE_3__","className","map","_ref3","key","id","post","propTypes","PropTypes","shape","object","isRequired","pathname","string","pageQuery"],"mappings":"uMAaMA,EAAM,SAAAC,GAAqC,IAAlCC,EAAkCD,EAAlCC,KAAMC,EAA4BF,EAA5BE,SAAUC,EAAkBH,EAAlBG,YAGrBC,EAAUD,EAAYE,IAAIC,KAC1BC,EAAiBJ,EAAYE,IAAIG,YAEjCC,EAAQR,EAAKS,kBAAkBC,MAAMC,OAAO,SAAAC,GAAA,OAAAA,EAAGC,KAAgBC,UAErE,OACIC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACIH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACInB,KAAMA,EACNC,SAAUA,EACVmB,KAAK,MACLf,KAAMH,EAAYE,IAAIC,KACtBE,YAAaL,EAAYE,IAAIG,YAC7Bc,MAAOnB,EAAYE,IAAIkB,gBAE3BP,EAAAC,EAAAC,cAACM,EAAA,EAAD,KACIR,EAAAC,EAAAC,cAAA,OAAKO,UAAU,aACXT,EAAAC,EAAAC,cAAA,UAAQO,UAAU,cACdT,EAAAC,EAAAC,cAAA,UAAKd,GACJG,EAAiBS,EAAAC,EAAAC,cAAA,SAAIX,GAAsB,MAEhDS,EAAAC,EAAAC,cAAA,WAASO,UAAU,aACdhB,EAAMiB,IAAI,SAAAC,GAAA,IAAGb,EAAHa,EAAGb,KAAH,OAEPE,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAUI,IAAKd,EAAKe,GAAIC,KAAMhB,OAGtCE,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAYrB,YAAaA,QAO7CJ,EAAIgC,UAAY,CACZ9B,KAAM+B,IAAUC,MAAM,CAClBvB,kBAAmBsB,IAAUE,SAC9BC,WACHjC,SAAU8B,IAAUC,MAAM,CACtBG,SAAUJ,IAAUK,OAAOF,aAC5BA,WACHhC,YAAa6B,IAAUE,QAGZnC,YAqBR,IAAMuC,EAAS","file":"component---src-templates-tag-js-4bc38e585c6a02a8b29a.js","sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { graphql } from \"gatsby\"\n\nimport { Layout, PostCard, Pagination } from \"../components/common\"\nimport { MetaData } from \"../components/common/meta\"\n\n/**\n * Tag page (/tag/:slug)\n *\n * Loads all posts for the requested tag incl. pagination.\n *\n */\nconst Tag = ({ data, location, pageContext }) => {\n    // console.log(`TAGS -> `, data, pageContext)\n\n    const tagName = pageContext.tag.name\n    const tagDescription = pageContext.tag.description\n    \n    const posts = data.allMarkdownRemark.edges.filter(({ node }) => node.excerpt)\n\n    return (\n        <>\n            <MetaData\n                data={data}\n                location={location}\n                type=\"tag\"\n                name={pageContext.tag.name}\n                description={pageContext.tag.description}\n                image={pageContext.tag.feature_image}\n            />\n            <Layout>\n                <div className=\"container\">\n                    <header className=\"tag-header\">\n                        <h1>{tagName}</h1>\n                        {tagDescription ? <p>{tagDescription}</p> : null}\n                    </header>\n                    <section className=\"post-feed\">\n                        {posts.map(({ node }) => (\n                            // The tag below includes the markup for each post - components/common/PostCard.js\n                            <PostCard key={node.id} post={node} />\n                        ))}\n                    </section>\n                    <Pagination pageContext={pageContext} />\n                </div>\n            </Layout>\n        </>\n    )\n}\n\nTag.propTypes = {\n    data: PropTypes.shape({\n        allMarkdownRemark: PropTypes.object,\n    }).isRequired,\n    location: PropTypes.shape({\n        pathname: PropTypes.string.isRequired,\n    }).isRequired,\n    pageContext: PropTypes.object,\n}\n\nexport default Tag\n\n// export const pageQuery = graphql`\n//     query GhostTagQuery($slug: String!, $limit: Int!, $skip: Int!) {\n//         ghostTag(slug: { eq: $slug }) {\n//             ...GhostTagFields\n//         }\n//         allGhostPost(\n//             sort: { order: DESC, fields: [published_at] },\n//             filter: {tags: {elemMatch: {slug: {eq: $slug}}}},\n//             limit: $limit,\n//             skip: $skip\n//         ) {\n//             edges {\n//                 node {\n//                 ...GhostPostFields\n//                 }\n//             }\n//         }\n//     }\n// `\nexport const pageQuery = graphql`\n    query MarkdownTagQuery($slug: String, $limit: Int!, $skip: Int!) {\n        allMarkdownRemark(\n            limit: $limit\n            sort: { fields: [frontmatter___published_at], order: DESC }\n            filter: {\n                frontmatter: {\n                    tags: { elemMatch: { frontmatter: { slug: { eq: $slug } } } }\n                    draft: { ne: true }\n                }\n            }\n            skip: $skip\n        ) {\n            totalCount\n            edges {\n                node {\n                    id\n                    html\n                    frontmatter {\n                        title\n                        slug\n                        tags {\n                            frontmatter {\n                                name\n                                slug\n                            }\n                        }\n                        feature_image {\n                            childImageSharp {\n                                fluid(maxWidth: 400, maxHeight: 250) {\n                                    ...GatsbyImageSharpFluid\n                                }\n                            }\n                          }\n                        author {\n                            frontmatter {\n                                name\n                                profile_image\n                            }\n                        }\n                    }\n                    excerpt\n                }\n            }\n        }\n    }\n`\n"],"sourceRoot":""}